/*
  (local-set-key (kbd "s-r") (lambda () (interactive) (save-buffer) (process-send-string "*shell viz*" "echo '\n'; webppl src/multi.wppl --require .\n")))
*/

// NB: doesn't work for lists with duplicate elements
var samplePermutation = function(xs) {
  if (xs.length == 0) {
    return []
  } else {
    var x = uniformDraw(xs);
    return [x].concat(samplePermutation(_.without(xs, x)));
  }
}

var err = function(msg) {
  console.error(msg);
  process.exit()
}

var multi = function(dist) {

  var mappingSamplers = {
    freqtable: function(fieldTypes) {
      // assumes 0 r
      var n = _.size(fieldTypes), fields = _.keys(fieldTypes), types = _.pluck(fieldTypes, 'type');

      var d = {
        '1': ['col'],
        '2': ['col','row'],
        '3': ['col','row','facetCol'],
        '4': ['col','row','facetCol','facetRow']
      }

      return _.object(fields, d[n + '']);
    },
    hist: function(fieldTypes) {
      var n = _.size(fieldTypes),
          fields = samplePermutation(_.keys(fieldTypes));

      if (n == 1) {
        // TODO: possibly use color?
        return _.object(fields, ['x'])
      } else if (n == 2) {
        return _.object(fields, ['x', uniformDraw(['color','facetCol'])])
      } else if (n == 3) {
        return _.object(fields, ['x', 'color', 'facetCol']);
      } else if (n == 4) {
        return _.object(fields, ['x','color','facetCol', 'facetRow']);
      } else {
        return err("too many fields");
      }
    },
    scatter: function(fieldTypes) {
      var n = _.size(fieldTypes),
          fields = samplePermutation(_.keys(fieldTypes)),
          types = _.values(fieldTypes),
          nR = _.countBy(types).r;

      var aesthetics =
          ((nR == 1)
           ? ((n == 1) ? ['x'] :
              (n == 2) ? ['x', uniformDraw(['color','y'])] :
              (n == 3) ? ['x', 'color', 'facetCol'] :
              (n == 4) ? ['x','color','facetCol', 'facetRow'] :
              err("too many fields")) :
           // nR == 2
           ((nR == 2)
            ? ((n == 2) ? ['x','y'] :
               (n == 3) ? ['x','y',uniformDraw(['color','facetCol'])] :
               (n == 4) ? ['x','y','color','facetCol'] :
               (n == 5) ? ['x','y','color','facetCol', 'facetRow'] :
               err("too many fields"))
            : err("nR = " + nR))
          )

      var out = _.object(fields, aesthetics),
          outI = _.invert(out);

      // forbid any r fields from being mapped to facetCol and facetRow
      condition(fieldTypes[outI.facetCol] !== 'r' &&
                fieldTypes[outI.facetRow] !== 'r' &&
                fieldTypes[outI.color] !== 'r')

      return out;
    },
    density: function(fieldTypes) {
      var n = _.size(fieldTypes),
          fields = samplePermutation(_.keys(fieldTypes)),
          types = _.values(fieldTypes),
          nR = _.countBy(types).r;

      // TODO: do something different for 1r versus 2r
      var aesthetics =
          ((nR == 1)
           ? ((n == 1) ? ['x'] :
              (n == 2) ? ['x', uniformDraw(['color','facetCol'])] :
              (n == 3) ? ['x', 'facetCol', uniformDraw(['facetRow', 'color'])] :
              (n == 4) ? ['x','color','facetCol', 'facetRow'] :
              err("too many fields")) :
           // nR == 2
           ((nR == 2)
            ? err("should use heat map for nR == 2")
            : err("nR = " + nR))
          )

      var out = _.object(fields, aesthetics),
          outI = _.invert(out);

      // forbid any r fields from being mapped to facetCol and facetRow
      condition(fieldTypes[outI.facetCol] !== 'r' &&
                fieldTypes[outI.facetRow] !== 'r' &&
                fieldTypes[outI.color] !== 'r')

      return out;

    }
  }

  var getColumnType = function(columnValues) {
    // for now, support real, integer, and categorical
    // some questions:
    // - can we support list of reals a la dirichlet?
    // - would knowing type information from the forward model (e.g., foo ~ multinomial([a,b,c])) help?
    if (_.every(columnValues, _.isNumber)) {
      return _.every(columnValues, Number.isInteger) ? 'c' : 'r'
    } else {
      return 'c'
    }
  };

  var getColumnTypes = function(df) {
    var columnNames = _.keys(df[0]);
    return _.object(
      columnNames,
      map(function(name) {
        if (name == '__prob__') {
          return 'real'
        } else {
          return getColumnType(_.pluck(df, name));
        }
      }, columnNames)
    )
  };

  var sampleGraph = function(distDf) {
    // get types for every column except __prob__
    var fieldTypes = _.omit(getColumnTypes(distDf), '__prob__'),
    types = _.values(fieldTypes);

    var nR = filter(function(t) { return t == 'r' }, types).length;

    var possibleMarks = [
      ['freqtable','hist'],  // 0 r
      ['scatter','density'], // 1 r
      ['scatter','heat'],    // 2 r
      ['parcoords']          // 3 r
    ][nR > 3 ? 3 : nR];

    var mark = uniformDraw(possibleMarks);
    // condition(mark == 'hist')
    condition(mark == 'density')

    // sample mappings for this mark
    var mappingSampler = mappingSamplers[mark],
    mappings = mappingSampler(fieldTypes);

    // make vega spec
    var specMaker = specMakers[mark],
        spec = specMaker(mappings, distDf, fieldTypes);

    /* conditions:
       - prefer colors over facet cols
       - prefer facet cols over facet rows
       - prefer fewer colors
    */

    var out = {mark: mark,
               mappings: mappings,
               spec: spec};
    return out;
  };

  var toVlAesthetic = {facetCol: 'column',
                       facetRow: 'row',
                       x: 'x',
                       y: 'y',
                       color: 'color'
                      };
  var toVlType = {'c': 'nominal', 'r': 'quantitative'};
  var specMakers = {
    hist: function(_mappings, _distDf, fieldTypes) {
      var k = _.size(_mappings);
      var _mappingsI = _.invert(_mappings);

      var presentAesthetics = _.keys(_mappingsI),
          missingAesthetics = _.difference(['x','facetRow','facetCol','color'], presentAesthetics);

      // add dummy columns (facetRow, facetCol, or color) to mappings dictionaries

      // TODO: when we have dummy facets, why do logical field names and scale names need to be the same? (e.g. "gx")
      // for the padding to be correct?
      var facetLogicalNames = {facetRow: 'gy', facetCol: 'gx', color: 'gc'};

      // logical to physical
      var LP = _.extend(_.object(map(function(name) { return [facetLogicalNames[name], name]  },
                                     missingAesthetics)),
                        _mappings);
      // physical to logical
      var PL = _.invert(LP);

      // add dummy columns to data
      var distDf = missingAesthetics.length == 0
        ? _distDf
        : map(function(row) {
          var dummyCols = _.object(map(function(name) { return [facetLogicalNames[name], 'dummy']  }, missingAesthetics))
          _.extend(dummyCols, row) },
              _distDf);

      // start building spec from the bottom up

      var xSource = PL.x;
      var colorSource = PL.color;

      var marks2 = [
        {name: 'marks2',
         type: 'rect',
         properties: {
           update: {
             x:      {scale: 'colorPosScale', field: colorSource},
             width:  {scale: 'colorPosScale', band: true, offset: 0},
             y:      {scale: 'probScale', field: '__prob__'},
             y2:     {scale: 'probScale', value: 0},
             fill:   {scale: 'colorColorScale', field: colorSource},
             opacity: {value: 0.7}
           }
         }
        }
      ];

      var marks1 = [
        {name: 'marks1',
         type: 'group',
         from: {
           transform: [{type: "facet",groupby: xSource}]
         },
         properties: {
           enter: {
             x: {scale: "xScale",field: "key"},
             width: {scale: "xScale",band: true}
           }
         },
         scales: [{
           "name": "colorPosScale",
           "type": "ordinal",
           "domain": {"field": colorSource},
           "range": "width"
         }],
         marks: marks2
        }
      ];

      var marks0 = [
        {name: 'marks0',
         type: 'group',
         properties: {
           update: {
             x: {scale: "gx",field: PL.facetCol},
             y: {scale: "gy",field: PL.facetRow},
             width: {scale: "gx", band: true, offset: 0},
             height: {scale: "gy", band: true, offset: 0},
             stroke: {value: "#ccc"},
             strokeWidth: {value: 1}
           }
         },
         from: {
           data: "raw",
           transform: [{type: "facet",groupby: [PL.facetRow, PL.facetCol]}]
         },
         scales: [
           {
             name: "xScale",
             type: "ordinal",
             domain: {field: xSource},
             range: "width",
             padding: 0.2
           },
           {
             name: "probScale",
             type: "linear",
             domain: {data: 'raw', field: "__prob__"}, // TODO: make a random choice between data domain and [0,1]?
             range: "height"
           },
           {
             name: "colorColorScale",
             type: "ordinal",
             domain: {field: colorSource},
             range: "category10"
           }
         ],
         axes: [
           {type: "y", scale: "probScale", title: "Probability"},
           {type: "x", scale: "xScale", title: xSource}
         ],
         marks: marks1
        }
      ];

      var facetScales = [
        {
          name: 'gx',
          type: 'ordinal',
          domain: {data: 'raw', field: PL.facetCol},
          range: 'width',
          padding: 0.1
        },
        {
          name: 'gy',
          type: 'ordinal',
          domain: {data: 'raw', field: PL.facetRow},
          range: 'height',
          padding: 0.1
        }
      ];

      var gyAxis = {
        type: "y",
        scale: "gy",
        orient: "left",
        tickSize: 0,
        offset: 30,
        title: PL.facetRow,
        properties: {axis: {strokeWidth: {value: 1}}}
      };
      var gxAxis = {
        type: "x",
        scale: "gx",
        tickSize: 0,
        offset: 30,
        title: PL.facetCol,
        properties: {
          axis: {strokeWidth: {value: 1}},
          title: {angle: 0}
        }
      };

      // TODO: hide facet Axes for dummy values
      var facetAxes =
          (_.contains(missingAesthetics, 'facetRow') ? [] : [gyAxis]).concat(
            _.contains(missingAesthetics, 'facetCol') ? [] : [gxAxis]
          );

      var viz = {
        regularVega: true,
        width: 300,
        height: 300,
        data: [{"name": "raw", "values": distDf}],
        scales: facetScales,
        axes: facetAxes,
        marks: marks0
      };

      return viz;
    },
    scatter: function(_mappings, _distDf, fieldTypes) {
      var LP = _mappings;
      var PL = _.invert(LP);


      // e.g.,
      // {
      //   x: {field: PL.x, type: toVlType[fieldTypes[PL.x]]},
      //   y: {field: PL.y, type: toVlType[fieldTypes[PL.y]]}
      // }
      var encodings = _.object(map(
        function(aesthetic) {
          var field = PL[aesthetic],
              type = fieldTypes[field],
              vlType = toVlType[type];

          return [toVlAesthetic[aesthetic], {field: field, type: vlType}]
        },
        _.keys(PL)
      ))

      var out = {
        regularVega: false,
        data: {values: _distDf},
        mark: "point",
        encoding: _.extend({size: {field: '__prob__', type: 'quantitative'}}, encodings)
      }
      return out
    },
    density: function(_mappings, _distDf, fieldTypes) {
      var LP = _mappings;
      var PL = _.invert(LP);

      // group by cartesian product of all categorical variables
      var cFields = _.pluck(filter(function(pair) { return pair[1] == 'c' },
                                   _.pairs(fieldTypes)),
                            '0');

      var rFields = _.pluck(filter(function(pair) { return pair[1] == 'r' },
                                   _.pairs(fieldTypes)),
                            '0'),
          rField = rFields[0];


      var distDfKeyed = map(
        function(row) { _.extend({__key__: JSON.stringify(_.pick(row, cFields))}, row) },
        _distDf
      )
      var distDfGrouped = _.groupBy(distDfKeyed, '__key__');
      var densitiesGrouped = mapObject(
        function(key, group) {
          var keyParsed = JSON.parse(key);
          var probs = _.pluck(group, '__prob__');
          var weight = util.sum(probs);
          var values = _.pluck(group, rField);
          var densityEstimates = map(
            function(x) {
              var z = _.object([[rField, x.item],["__prob__", x.density * weight]]);
              return _.extend(z, keyParsed)
            },
            webpplViz.stats.kde(values, {weights: probs}));
          return densityEstimates;
        },
        distDfGrouped
      )
      var densities = _.flatten(_.values(densitiesGrouped))
      // e.g.,
      // {
      //   x: {field: PL.x, type: toVlType[fieldTypes[PL.x]]},
      //   y: {field: PL.y, type: toVlType[fieldTypes[PL.y]]}
      // }
      var encodings = _.object(map(
        function(aesthetic) {
          var field = PL[aesthetic],
              type = fieldTypes[field],
              vlType = toVlType[type];

          return [toVlAesthetic[aesthetic], {field: field, type: vlType}]
        },
        _.keys(PL)
      ))

      var out = {
        regularVega: false,
        data: {values: densities},
        mark: "line",
        encoding: _.extend({y: {field: '__prob__', type: 'quantitative'}}, encodings)
      }
      return out
    }
  }

  // convert distribution to a dataframe including a __prob__  column
  var distDf = map(function(x) { _.extend({__prob__: Math.exp(dist.score(x))}, x)},
                   dist.support())

  var graphDist = Enumerate(function() { sampleGraph(distDf) });

  map(function(abs) {
    if (typeof viz !== 'undefined' /* browser */) {
      viz.renderSpec(abs.spec, {regularVega: abs.spec.regularVega, smartAxes: false})
    } else {
      console.log(JSON.stringify(abs.spec, null, 1))
      process.exit()
    }
  },
      graphDist.support())

  return ""
}

if (typeof window == 'undefined') {
  util.seedRNG(3)
  var posterior = MH(function() {
    return {skill: gaussian(0,1),
            group: uniformDraw(['a','b']),
            country: flip(0.9) ? 'CAN' : 'MEX'
           }
  }, 100)
  multi(posterior)
}
''

//webpplViz.stats.kde.toString()
