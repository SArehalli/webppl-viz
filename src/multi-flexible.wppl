var marks = ['rect',
             'symbol',
             'path',
             'arc',
             'area',
             'line',
             'rule',
             'text',
             'group'
            ];

var sharedProperties = [
  'x',
  'x2',
  'xc',
  'width',
  'y',
  'y2',
  'yc',
  'height',
  'opacity',
  'fill',
  'fillOpacity',
  'stroke',
  'strokeWidth'/*,
  'strokeDash', // experimental
  'strokeDashOffset' // experimental
  */
];

var addProperties = {
  rect: [],
  symbol: ['size','shape'],
  path: ['path'],// SVG path string
  arc: ['innerRadius','outerRadius','startAngle','endAngle'],
  area: ['orient','interpolate','tension'],
  line: ['interpolate', 'tension']
}

var removeProperties = {
  rect: [],
  symbol: ['x2','xc','width','y2','yc','height']
}

var requiredProperties = {
  symbol: ['x','y', 'stroke']
}

var defaultValues = {
  symbol: {
    fill: {value: "#99ccff"},
    stroke: {value: "#4682b4"},
    strokeWidth: {value: 1},
    size: {value: 30},
    opacity: {value: 0.8}
  }
}

var testMarks = ['symbol'];

// TODO: plug in type inference from vega-lite
var getType = function(v) {
  var t = typeof v;
  return {number: 'quantitative',
          string: 'nominal'
         }[t]
}

// sample a random subset
// todo: implement version that takes size of the subset as an argument
var subset = function(xs, _p) {
  var p = (_p === undefined) ? 0.5 : _p;
  return _.flatten(map(function(x) { return flip(p) ? x : [] }, xs))
}

util.seedRNG(4)

var pam = function(xs,f) {
  return map(f,xs)
}

var pam2 = function(xs,ys,f) {
  return map2(f,xs,ys)
}

var pamObject = function(o,f) {
  return mapObject(f,o)
}



// maps vName onto ranges
var ranges = {
  x: 'width',
  y: 'height',
  fill: ["#eeeeee","#313695"],
  stroke: ["#a50026", "#333333"],
  size: [1, 10]
}

// should show the relationship
// prob ~ .
var multiviz = function(df) {
  var columnNames = _.keys(df[0]);
  var columnTypes = map(getType, _.values(df[0]));
  var columnTypesDict = _.object(columnNames, columnTypes);


  var sampleMarkMappings = function(m) {
    // think about move where you fix required properties
    var requiredVNames = requiredProperties[m];
    var optionalVNames = subset(_.keys(defaultValues[m]), 0.5);

    var vNames = append(requiredVNames, optionalVNames);

    // for each name, sample an ldim
    var lNames = subset(columnNames, 0.5);

    condition(vNames.length == lNames.length);

    return _.object(vNames, lNames);
  }

  var model = function() {
    var markNames = [uniformDraw(testMarks)];

    var markMappings = map(sampleMarkMappings, markNames);
    condition(_.size(markMappings[0]) > 3)

    // TODO: think about treating props that are shared across all marks differently
    // e.g. rewarding mapping them to the same ldim. we can use size principle to do some
    // of this work (or DPmem?)

    // for each mark mapset, make a scale for all the vdims in it
    var scales = _.flatten(map2(
      function(mName, _mapset) {
        var mapset = _.pairs(_mapset);

        return pam(mapset,
                   function(pair) {
                     var vName = pair[0];
                     var lName = pair[1];

                     var type = {quantitative: 'linear', nominal: 'ordinal'}[columnTypesDict[lName]];

                     // TODO: add "zero" and "nice" properties
                     return {
                       name: mName + '_' + vName,
                       type: type,
                       domain: {data: 'df', field: lName},
                       range: ranges[vName],
                       points: (mName == 'symbol')
                     }

                   });
      },
      markNames,
      markMappings));

    var marks = pam2(
      markNames,
      markMappings,
      function(mName, mapset) {

        var sampledProps = pamObject(mapset, function(k,v) {
          return {"scale": mName + "_" + k,
                  "field": v};
        });

        var props = _.extendOwn({},
                                defaultValues[mName],
                                sampledProps
                               );

        return _.extend({type: mName,
                         from: {data: 'df'},
                         properties: {enter: props}
                        });
      });

    // add axes
    var axes = _.flatten(pam2(
      markNames,
      markMappings,
      function(mName, _mapset) {
        var mapset = filter(function(pair) { return _.contains(['x','y'], pair[0]) },
                            _.pairs(_mapset));

        return pam(mapset,
                   function(pair) {
                     var vName = pair[0];
                     var lName = pair[1];

                     return {
                       type: vName,
                       scale: mName + "_" + vName
                     }

                   });
      }
    ));

    // TODO: add legends
    var legends = _.flatten(pam2(
      markNames,
      markMappings,
      function(mName, _mapset) {
        var mapset = _.object(filter(function(pair) { return !_.contains(['x','y'],pair[0]) },
                                     _.pairs(_mapset)));

        // group vdims by the ldim they portray
        // (individual vega legends all have to have the same domain)
        // HACKY (because we can't pass a function to groupBy)
        var mapsetGrouped = _.pairs(_.groupBy(_.pairs(mapset), '1'));

        var r = pam(mapsetGrouped,
                    function(pair) {
                      var lName = pair[0];
                      var vNames = _.pluck(pair[1],'0');

                      return _.object(pam(vNames,
                                          function(vName) { return [vName, mName + "_" + vName] }))
                    }
                   )

        return r;
      }
    ));


    var spec = {
      data: [{name: 'df', values: df}],
      scales: scales,
      axes: axes,
      marks: marks,
      legends: legends
    }

    return markMappings;//spec;

  }

  Rejection(model, {samples: 10});

}

var erpToDf = function(erp) {
  return map(function(state) {
    return _.extend({}, state, {prob: Math.exp(erp.score(state))})
  }, erp.support())

}

var post = MH(function() {
  var brand = flip(0.7) ? 'coke' : 'pepsi';
  return {
    country: uniformDraw(['usa','mexico','canada']),
    brand: brand,
    price: gaussian(brand == 'coke' ? 4 : 2, 1)
  }
}, 100);

//multiviz()

var df = erpToDf(post);
util.seedRNG(1)
var vpost = multiviz(df).sample();

JSON.stringify(vpost,null,2);
